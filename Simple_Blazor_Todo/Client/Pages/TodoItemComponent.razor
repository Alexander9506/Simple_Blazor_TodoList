@using Simple_Blazor_Todo.Shared
@using Simple_Blazor_Todo.Client.Helper
@using System.ComponentModel
@using System.Linq.Expressions

@if(todo != null) {
    
    <div class="border-dark border-1">
        <div class="input-group" >
            <div class="input-group-prepend">
                <div class="input-group-text">
                    <input class="check" type="checkbox" @bind="todo.IsDone" @bind:event="oninput"
                           @onchange="(e) => {
                                         MoveItem.Invoke(todo);
                                         PropertyHasChanged(String.Empty);
                                     }"
                           /> 
                    @todo.IsDone
                </div>
            </div>
            <input type="text" class="form-control" 
                   value="@todo.Titel" 
                   style="@(todo.IsDone ? "text-decoration-line: line-through" : "")" 
                   @attributes="(todo.IsDone ? attributesDisabled : null)"
                   @oninput="(e) => ChangeAttribute(e, () => todo.Titel)"/>
            <div class="btn-group ml-1">
                <button class="btn btn-secondary" @onclick="ToggleCollapse" title="Details">
                    <i class="fas fa-angle-down"></i>
                </button>
                @if (!todo.IsDone)
                {
                    <button class="btn btn-primary" @onclick="(e) => AddItemBelow.InvokeAsync(todo)" title="Add">
                        <i class="fas fa-plus"></i>
                    </button>
                }
                <button class="btn btn-danger" @onclick="(e) => DeleteItem.InvokeAsync(todo)" title="Delete">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        </div>
    <div class="@DetailsCssClasses from-group mt-1">
        <label>Done since</label>

        <div class="input-group">
            <input class="form-control" type="date" @oninput="(e) => ChangeAttribute(e, () => todo.DoneAt)" value="@GetDateString(todo.DoneAt, "yyyy-MM-dd")" />
            <input class="form-control" type="time" @oninput="(e) => ChangeAttribute(e, () => todo.DoneAt)" value="@GetDateString(todo.DoneAt, "hh:mm")"/>
        </div>

        <label>Deadline</label>
        <div class="input-group">
            <input class="form-control" type="date" @oninput="(e) => ChangeAttribute(e, () => todo.DeadLine)" value="@GetDateString(todo.DeadLine, "yyyy-MM-dd")" />
            <input class="form-control" type="time" @oninput="(e) => ChangeAttribute(e, () => todo.DeadLine)" value="@GetDateString(todo.DeadLine, "hh:mm")"/>
        </div>

        <label>Description</label>
        <textarea class="form-control" rows="4"  @oninput="(e) => ChangeAttribute(e, () => todo.Description)">@todo.Description</textarea>
    </div>
    </div>
}

@code {
    private bool collapseDetails = true;
    private string DetailsCssClasses => collapseDetails ? "collapse" : null;

    [Parameter]
    public TodoItem todo { get; set; }

    [Parameter]
    public EventCallback<TodoItem> AddItemBelow { get; set; }

    [Parameter]
    public Action<TodoItem> MoveItem { get; set; }

    [Parameter]
    public EventCallback<TodoItem> DeleteItem { get; set; }

    [Parameter]
    public Action<TodoItem> ChangedItem{ get; set; }

    private Dictionary<string, object> attributesDisabled = new Dictionary<string, object>() {
        {"disabled", ""}
    };

    private void ToggleCollapse() => collapseDetails = !collapseDetails;

    private void AddChildItem(TodoItem parent)
    {
        if(parent.ChildItems == null)
        {
            parent.ChildItems = new List<TodoItem>();
        }
        parent.ChildItems.Add(new TodoItem() { });
    }

    private void ChangeAttribute<T>(ChangeEventArgs e, Expression<Func<T>> property)
    {
        MemberExpression memberExpression = property.Body as MemberExpression;
        if(memberExpression != null)
        {
            System.Reflection.PropertyInfo propertyInfo = memberExpression.Member as System.Reflection.PropertyInfo;
            if(propertyInfo != null)
            {
                PropertyHasChanged(propertyInfo.Name);
                propertyInfo.SetValue(todo, Convert<T>(e.Value));
            }
        }
    }

    private T Convert<T>(Object value)
    {
        if(value != null)
        {
            if(value.GetType().FullName == typeof(T).FullName)
            {
                return (T) value;
            }

            try
            {
                TypeConverter converter = TypeDescriptor.GetConverter(typeof(T));
                if(converter != null)
                {
                    return (T) converter.ConvertFrom(value);
                }
            }catch(Exception e)
            {
                Console.WriteLine($"Cannot convert from {value.GetType().FullName} to {typeof(T).FullName }");
                Console.WriteLine(e.Message);
            }
        }
        return default;
    }

    private void PropertyHasChanged(string name)
    {
        if(ChangedItem != null)
        {
            ChangedItem.Invoke(todo);
        }
    }

    private string GetDateString(DateTime? date, string pattern)
    {
        if(date != null)
        {
            return ((DateTime)date).ToString(pattern);
        }
        return default;
    }
}
